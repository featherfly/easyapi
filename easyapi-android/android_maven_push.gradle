apply plugin: 'maven-publish'
apply plugin: 'signing'


//configurations {
//    deployerJars
//}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def sonatypeRepositoryUrl
if (isReleaseBuild()) {
    println 'RELEASE BUILD'
    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
    println 'SNAPSHOT BUILD'
    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"

}

def getRepositoryUsername() {
    return hasProperty('nexusUsername') ? nexusUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('nexusPassword') ? nexusPassword : ""
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId = moduleGroup
            artifactId = archivesBaseName
            version = version

            artifact sourcesJar
            artifact javadocJar
//            artifact bundleReleaseAar
            afterEvaluate {
                artifact bundleReleaseAar
            }

            pom {
                name = archivesBaseName
                packaging = POM_Packaging
                description = POM_DESCRIPTION
                url = POM_URL
                inceptionYear = POM_INCEPTION_YEAR
                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }
                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }
            }
        }
        // List all "compile" dependencies (for old Gradle)
        configurations.compile.getAllDependencies().each { dep -> addDependency(dep, "compile") }
        // List all "api" dependencies (for new Gradle) as "compile" dependencies
        configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
        // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
        configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
    }
    repositories {
        maven {
            url sonatypeRepositoryUrl
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
        }
    }
}
signing {
    sign publishing.publications.aar
}
